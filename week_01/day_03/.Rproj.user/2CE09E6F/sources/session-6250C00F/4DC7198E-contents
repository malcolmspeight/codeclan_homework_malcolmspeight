---
title: "`Dplyr` Homework with answers"
output:
  html_document:
    toc: true
    toc_float: true
    number_sections: true
    df_print: paged
    css: ../../../styles.css
  pdf_document: default
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
```


The data for this homework comes from an Open Data Science website called Kaggle. Kaggle has many open source datasets for you to use and most of them come with code uploaded by other users showing different ways to explore the data. It is a great way to learn about data-wrangling and analysis and if you are interested then set up your own account and get going. 

For this task we will make use of their **Starbucks Calorie** dataset. You can find out more information about each dataset and what each column represents \href{https://www.kaggle.com/starbucks/starbucks-menu}{https://www.kaggle.com/starbucks/starbucks-menu}, but we have put the version you need in CodeClanData under `drinks_content`. 


```{r, warning=FALSE, message=FALSE, echo = FALSE}
library(tidyverse)
```



# MVP

<br>

**Question 1.**

Load in the dataset and have a look at it. What are the dimensions, variable types, variable names, etc.?


<details>
<summary>**Answer**</summary>
```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(CodeClanData)
```


```{r, eval = FALSE}
# first 5 rows
head(drinks_content,5)

# last 5 rows
tail(drinks_content,5)

# get the dimensions
dim(drinks_content)

# get variable names 
names(drinks_content)
```
</details>

<br>

**Question 2.**

Let's first investigate the calories of different drinks. Select the variables `Beverage_category`, `Beverage`, `Beverage prep` and `Calories` from your data. 

Since we are interested in the calorie content, check if there are any NA values in the data, and drop them if there are.   


<details>
<summary>**Answer**</summary>
```{r}
# let's check if there are any missing values 
drinks_content %>%
  select(Beverage_category, Beverage, Beverage_prep, Calories) %>%
  filter(is.na(Calories)) %>%
  summarise(count_of_missing_calories = n())

#there isn't any drinks with missing Calories so we are all good!
```
</details>

<br>


**Question 3.**

Create a new variable (column) called `calorie_diff`, which stores the difference between 135 calories (135 calories = 10 cubes of sugar!) and the calories in each drink.
(hint: you'll want to subtract 135 from the calories to see which drink have more or less than 10 cups of sugar). 


<details>
<summary>**Answer**</summary>
```{r}
# create a new variable 
drink_calories <- drinks_content %>%
  mutate(calorie_diff = Calories - 135)

```
</details>

<br>

**Question 4.**

Summarise the mean number of calories in each `beverage_category`. Which 3 category of drinks have the most calories? Which 3 drinks have the least? Write a small summary of your findings.  

<details>
<summary>**Answer**</summary>
```{r}
most_calories <- drink_calories %>%
  group_by(Beverage_category) %>%
  summarise(mean_calories = mean(Calories)) %>%
  arrange(desc(mean_calories)) %>%
  head(3)

most_calories
```

```{r}
least_calories <- drink_calories %>%
  group_by(Beverage_category) %>%
  summarise(mean_calories = mean(Calories)) %>%
  arrange(mean_calories)%>%
  head(3)

least_calories
```
</details>

<br>

**Question 5.**

Let's look at this a different way. What is the average number of calories in each `Beverage_prep` type?    

<details>
<summary>**Answer**</summary>
```{r}
# work out the mean calories for each beverage prep 
average_bev_prep <- drink_calories %>%
  group_by(Beverage_prep) %>%
  summarise(mean_cals = mean(Calories)) %>%
  arrange(desc(mean_cals))

average_bev_prep
```
</details>

<br>


**Question 6.**

Which `Beverage_prep` type contains more than the average calories of all drinks? 
<details>
<summary>**Hint**</summary>: to answer this, you'll have to first figure out what the average calories across all drinks are, and then use that as a filter for the grouped `Beverage_prep` data.
</details>

<details>
<summary>**Answer**</summary>
```{r}
# find the average calories - and we need to use pull() to be able to use the number in calculations
avg_calories <- drink_calories %>%
                  summarise(mean_calories = mean(Calories)) %>%
                  pull()

avg_calories 
```

```{r}
# find which prep types have above average calories
above_avg_calories <- average_bev_prep %>%
  filter(mean_cals >= avg_calories)

above_avg_calories
```

```{r}
# we also could have done it using mutate and then filter 

average_bev_prep %>%
  mutate(is_greater_than_avg = mean_cals >= avg_calories) %>%
  filter(is_greater_than_avg == TRUE)
```
</details>

<br>


**Question 7.**

Which is the best type of **coffee** drink (and by 'drink' we mean the combination of `Beverage_category`, `Beverage` and `Beverage_prep`) to get if you're worried about consuming too many calories? 

<details>
<summary>**Answer**</summary>
```{r}
head(drink_calories)

# can start by finding the drink with the lowest number of calories 
drink_calories %>%
  group_by(Beverage_category, Beverage, Beverage_prep) %>%
  summarise(min_calories = min(Calories)) %>%
  arrange(min_calories) %>%
  head(1)

# But this is a Tea and the answer specifically asked for coffee drink! So we will filter out this tea drink to get the lowest calorie coffee drink.


drink_calories %>%
  filter(Beverage_category != "TazoÂ® Tea Drinks") %>%
  group_by(Beverage_category, Beverage, Beverage_prep) %>%
  summarise(min_calories = min(Calories)) %>%
  arrange(min_calories) %>%
  head(1)
```
</details>




